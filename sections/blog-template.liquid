{%- paginate blog.articles by 9 -%}

<div data-section-id="{{ section.id }}" data-section-type="blog">
  <header class="section-header{% if section.settings.blog_show_tag_filter and blog.tags.size > 0 %} section-header--with-link{% endif %}">
    <h1 class="section-header__title">
      {{ blog.title }}

      {%- if section.settings.blog_show_rss -%}
        <a href="{{ shop.url }}{{ blog.url }}.atom" class="rss-link">
          <svg aria-hidden="true" focusable="false" role="presentation" class="icon icon-rss" viewBox="0 0 20 20"><path fill="#444" d="M5.903 16.586a2.489 2.489 0 1 1-4.977 0 2.489 2.489 0 0 1 4.977 0zM12.956 19.075H9.43c0-4.688-3.817-8.505-8.505-8.505V7.044c6.638 0 12.031 5.393 12.031 12.031z"/><path fill="#444" d="M15.445 19.075c0-8.028-6.493-14.52-14.52-14.52V.925c10.019 0 18.15 8.131 18.15 18.15h-3.63z"/></svg>
          <span class="icon__fallback-text">RSS</span>
        </a>
      {%- endif -%}
    </h1>
  </header>

  {% comment %} --> Change Pagination to Infinite Scroll {% endcomment %}

  {% assign all_count = blog.articles_count %}
  {% assign paginate_by = 9  %}

  {% comment %} <div class="new-grid">
    {%- for article in blog.articles -%}
      {%- liquid
        assign style = 'medium'
        if forloop.first
          assign style = 'large'
        endif
      -%}
      {%- render 'article-grid-item',
        blog: blog,
        article: article,
        style: style,
        show_tags: section.settings.blog_show_tags,
        show_date: section.settings.blog_show_date,
        show_comments: section.settings.blog_show_comments,
        show_author: section.settings.blog_show_author,
        image_size: section.settings.blog_image_size -%}
    {%- endfor -%}
  </div>

  {%- liquid
    if paginate.pages > 1
      render 'pagination', paginate: paginate
    endif
  -%} {% endcomment %}

  <div id="infinite-scroll-container" class="new-grid">
    {%- for article in blog.articles -%}
      {%- liquid
        assign style = 'medium'
        if forloop.first
          assign style = 'large'
        endif
      -%}
      {%- render 'article-grid-item',
        blog: blog,
        article: article,
        style: style,
        show_tags: section.settings.blog_show_tags,
        show_date: section.settings.blog_show_date,
        show_comments: section.settings.blog_show_comments,
        show_author: section.settings.blog_show_author,
        image_size: section.settings.blog_image_size,
        currentPage: paginate.current_page -%}
    {%- endfor -%}
  </div>

  <div id="infinite-scroll-loader" style="display: block; text-align: center; padding: 20px;">
    <div class="infinite-products-count--wrapper">
      <span>Showing</span>
      <span class="products-count--showing">
        {%- if paginate_by < all_count -%}
          {{- paginate_by -}}
        {%- else -%}
          {{- all_count -}}
        {%- endif -%}
      </span>
      <span style="margin-left:-5px;margin-right:-5px;">/</span>
      <span>
        {{- all_count -}}
      </span>
    </div>
    <button class="button-load-more" >Load More</button>
    {% comment %} <img src="https://cdn.shopify.com/s/files/1/1205/7108/files/turtle-loading.gif"  width="95px" height="95px"> {% endcomment %}
    {% comment %} <svg class="lds-spinner" width="60px" height="60px" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 100 100" preserveAspectRatio="xMidYMid" style="background: none;"><g transform="rotate(0 50 50)"><rect x="47" y="24" rx="9.4" ry="4.8" width="6" height="12" fill="#000"><animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="1s" begin="-0.9166666666666666s" repeatCount="indefinite"></animate></rect></g><g transform="rotate(30 50 50)"><rect x="47" y="24" rx="9.4" ry="4.8" width="6" height="12" fill="#000"><animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="1s" begin="-0.8333333333333334s" repeatCount="indefinite"></animate></rect></g><g transform="rotate(60 50 50)"><rect x="47" y="24" rx="9.4" ry="4.8" width="6" height="12" fill="#000"><animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="1s" begin="-0.75s" repeatCount="indefinite"></animate></rect></g><g transform="rotate(90 50 50)"><rect x="47" y="24" rx="9.4" ry="4.8" width="6" height="12" fill="#000"><animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="1s" begin="-0.6666666666666666s" repeatCount="indefinite"></animate></rect></g><g transform="rotate(120 50 50)"><rect x="47" y="24" rx="9.4" ry="4.8" width="6" height="12" fill="#000"><animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="1s" begin="-0.5833333333333334s" repeatCount="indefinite"></animate></rect></g><g transform="rotate(150 50 50)"><rect x="47" y="24" rx="9.4" ry="4.8" width="6" height="12" fill="#000"><animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="1s" begin="-0.5s" repeatCount="indefinite"></animate></rect></g><g transform="rotate(180 50 50)"><rect x="47" y="24" rx="9.4" ry="4.8" width="6" height="12" fill="#000"><animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="1s" begin="-0.4166666666666667s" repeatCount="indefinite"></animate></rect></g><g transform="rotate(210 50 50)"><rect x="47" y="24" rx="9.4" ry="4.8" width="6" height="12" fill="#000"><animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="1s" begin="-0.3333333333333333s" repeatCount="indefinite"></animate></rect></g><g transform="rotate(240 50 50)"><rect x="47" y="24" rx="9.4" ry="4.8" width="6" height="12" fill="#000"><animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="1s" begin="-0.25s" repeatCount="indefinite"></animate></rect></g><g transform="rotate(270 50 50)"><rect x="47" y="24" rx="9.4" ry="4.8" width="6" height="12" fill="#000"><animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="1s" begin="-0.16666666666666666s" repeatCount="indefinite"></animate></rect></g><g transform="rotate(300 50 50)"><rect x="47" y="24" rx="9.4" ry="4.8" width="6" height="12" fill="#000"><animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="1s" begin="-0.08333333333333333s" repeatCount="indefinite"></animate></rect></g><g transform="rotate(330 50 50)"><rect x="47" y="24" rx="9.4" ry="4.8" width="6" height="12" fill="#000"><animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="1s" begin="0s" repeatCount="indefinite"></animate></rect></g></svg> {% endcomment %}
  </div>
  {% comment %} <-- Change Pagination to Infinite Scroll {% endcomment %}
</div>

{%- endpaginate -%}

{% comment %} --> Change Pagination to Infinite Scroll {% endcomment %}
<style>
  #infinite-scroll-loader {
    font-size: 16px;
    color: #555;
    margin-bottom: 45px;
  }  
  .infinite-products-count--wrapper span {
    color: #152755;
    leading-trim: both;
    text-edge: cap;
    font-family: "FuturaMedium";
    font-size: 16px;
    font-style: normal;
    font-weight: 450;
    line-height: 16px; /* 100% */
  }  
  {% comment %} .button-load-more:hover{
    color:#55CCD9;
  } {% endcomment %}
  .button-load-more{
    padding: 10px 60px;
    border-radius: 6px;
    background: #152755;
    color: #FFF;
    
    leading-trim: both;
    text-edge: cap;
    font-family: "FuturaBook";
    font-size: 16px;
    font-style: normal;
    font-weight: 450;
    line-height: 16px; /* 100% */
    margin-top: 20px;
  }
</style>
<script>
  document.addEventListener('DOMContentLoaded', () => {
    const container = document.getElementById('infinite-scroll-container');
    const loader = document.getElementById('infinite-scroll-loader');
    let isLoading = false;
    let currentPage = 1; // Initialize current page number
    let nextPageUrl = null; // Starting with null, will update dynamically
    let endOfPage = false;

    const loadMoreContent = async () => {
      const container = document.getElementById('infinite-scroll-container');
      const loader = document.getElementById('infinite-scroll-loader');
      if (isLoading||endOfPage) return;
  
      console.log("load more blogs.... currentPage = " + currentPage);

      isLoading = true;
      loader.style.display = 'block';
  
      try {
        // Fetch the next page's content (adjust the endpoint as needed)
        // Generate the next page URL based on the current URL and incrementing the page parameter
        const currentUrl = new URL(window.location.href); // Get the current page URL
        const params = new URLSearchParams(currentUrl.search); // Extract query parameters

        // Update the 'page' parameter to the next page number
        params.set('page', currentPage + 1); // Increment the page parameter

        // Rebuild the new URL with the updated page number
        nextPageUrl = `${currentUrl.origin}${currentUrl.pathname}?${params.toString()}`;

        console.log("next page Url=" + nextPageUrl);

        const response = await fetch(nextPageUrl);
        if (!response.ok) throw new Error('Failed to load content');
  
        const data = await response.text();
        
        const tempDiv = document.createElement('div');
        tempDiv.innerHTML = data;
  
        // Extract the new grid items
        const newItems = tempDiv.querySelectorAll('.new-grid > *');
        // Check if the response text is empty
        if (newItems.length === 0) {
          console.log('No more items to load, stopping further requests.');
          loader.style.display = 'none'; // Optionally hide the loader or show a message
          endOfPage = true;
          isLoading = false;
          return; // Stop loading further content if no items are returned
        }
        newItems.forEach((item) => container.appendChild(item));
  
        currentPage++;
        // Update showing count
        var showing_product_count = document.querySelector('.products-count--showing');
        var showing_count = {{ paginate_by }} * currentPage;
        var products_count = {{ all_count }} * 1;
        if ( showing_count < products_count )
          showing_product_count.innerHTML = showing_count;
        else {
          showing_product_count.innerHTML = products_count;
          endOfPage = true;
          isLoading = false;
          loader.style.display = 'none'; // Optionally hide the loader or show a message
        }
      } catch (error) {
        console.error('Error loading more content:', error);
        loader.style.display = 'none';
      } finally {
        isLoading = false;
        {% comment %} loader.style.display = 'none'; {% endcomment %}
      }
    };

    document.querySelector('.button-load-more').addEventListener('click', function (event) {
      event.preventDefault(); // Prevents the default link action
      loadMoreContent();
    });

{% comment %}   
    const handleScroll = () => {
      const container = document.getElementById('infinite-scroll-container');
      const loader = document.getElementById('infinite-scroll-loader');

      const scroll = window.scrollY || window.pageYOffset; // Current scroll position
      const loaderElement = loader;
      const loaderOffset = loaderElement.offsetTop; // Get the offset position of the loader
      const viewportHeight = window.innerHeight / 2; // Height of the viewport
    
      const loaderRect = loaderElement.getBoundingClientRect();
      {% comment %} console.log('Loader position relative to viewport:', loaderRect.top, window.innerHeight, loaderRect.bottom); {% endcomment %}
      console.log("loaderRect.top = " + loaderRect.top);
      console.log("window.innerHeight = " + window.innerHeight);
      console.log("loaderRect.bottom = " + loaderRect.bottom);

      if (loaderRect.top <= window.innerHeight * 2 && loaderRect.bottom > 0) {
        console.log('Triggering loadMoreContent');
        loadMoreContent(); // Trigger content loading when the loader reaches the bottom of the viewport
      }
    };
  
    const debounce = (func, delay) => {
      let timeout;
      return (...args) => {
        clearTimeout(timeout);
        timeout = setTimeout(() => func(...args), delay);
      };
    };
    
    window.addEventListener('scroll', debounce(handleScroll, 200)); {% endcomment %}
  });
  
</script>

{% comment %} <-- Change Pagination to Infinite Scroll {% endcomment %}

{% schema %}
{
  "name": "t:sections.blog-template.name",
  "class": "blog-layout__main",
  "settings": [
    {
      "type": "checkbox",
      "id": "blog_show_rss",
      "label": "t:sections.blog-template.settings.blog_show_rss.label"
    },
    {
      "type": "checkbox",
      "id": "blog_show_tags",
      "label": "t:sections.blog-template.settings.blog_show_tags.label",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "blog_show_date",
      "label": "t:sections.blog-template.settings.blog_show_date.label",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "blog_show_comments",
      "label": "t:sections.blog-template.settings.blog_show_comments.label",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "blog_show_author",
      "label": "t:sections.blog-template.settings.blog_show_author.label"
    },
    {
      "type": "select",
      "id": "blog_image_size",
      "label": "t:sections.blog-template.settings.blog_image_size.label",
      "default": "wide",
      "options": [
        {
          "value": "natural",
          "label": "t:sections.blog-template.settings.blog_image_size.options.natural.label"
        },
        {
          "value": "square",
          "label": "t:sections.blog-template.settings.blog_image_size.options.square.label"
        },
        {
          "value": "landscape",
          "label": "t:sections.blog-template.settings.blog_image_size.options.landscape.label"
        },
        {
          "value": "portrait",
          "label": "t:sections.blog-template.settings.blog_image_size.options.portrait.label"
        },
        {
          "value": "wide",
          "label": "t:sections.blog-template.settings.blog_image_size.options.wide.label"
        }
      ]
    }
  ]
}
{% endschema %}
